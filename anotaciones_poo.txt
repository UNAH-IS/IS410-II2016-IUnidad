POO
Pilares de la Programacion Orientada a Objetos
Encapsulacion: 
	Proteger los atributos internos de una clase para evitar modificaciones involuntarias.
	Para ello se hace uso de modificadores de acceso los cuales se definen a continuacion:
	*private: Solo son visibles dentro de la clase y los metodos de la clase.
	*public: Son visibles desde cualquier lugar
	*protected: Los atributos son visibles dentra de la misma clase, sus metodos y desde clases hijas. Generalmente se asignan a atributos de clases padre.
	*default: Es similar a public con la diferencia de que no es visible desde otros paquetes.

	Tecnicamente se encapsula un atributo definiendolo con el modificador de acceso private y acceder o asignar valores mediante metodos publicos mas conocidos como sets y gets.

	Modificador static: Los atributos y metodos con este modificador pueden ser accedidos a ellos sin crear instancias, se accede de la siguiente forma:
		Java: 
			NombreClase.atributoEstatico
		PHP:
			NombreClase::$atributoEstatico;
			Self::$atributoEstatico; //Dentro de la misma clase
	Por lo general son publicos, y los valores asignados son globales para cualquier objeto del mismo tipo.

	Composición: Utilizar en un atributo un tipo de dato previamente definido.
		Por ejemplo:
			//Como normalmente se haria:
			private String modelo;

			//Utilizando composicion:
			private Modelo modelo;
	Composicion normalmente se utiliza cuando un atributo puede tener mas atributos dependientes. 

Abstraccion
	Utilizar algo sin saber necesariamente como funciona o como esta compuesto, es decir nos abstraemos de la funcionalidad.
	La abstracción se logra definiendo atributos(cualidades) y funcionalidades (metodos) de un elemento especifico.

	

Herencia
	Funcionalidad que permite crear una clase a partir de otra, de tal forma que esta nueva clase hereda los atributos y metodos de la clase base. Una de las principales ventajas de la herencia es la reutilizacion de codigo.
	
	Para aplicar herencia se utiliza extends(Java y PHP) despues del nombre de la clase hija y luego el nombre de la clase padre.
	En java,PHP no se puede heredar de multiples clases.
	
	


	interfaces.

Polimorfismo (Poli: Muchos, morfismo: formas)
	Misma apariencia diferente forma o funcionalidad.

	Sobreescritura de metodos: Es volver a escribir un metodo en la clase hija que previamente estaba definido en la clase padre, con la salvedad de que puede tener un comportamiento completamente diferente.
	En Java se suele agregar la etiqueta @Override para indicar que se esta sobreescribiendo un metodo.

	En Java y en PHP para identificar si un objeto es una instancia de una clase especifica se utiliza el operador logico instanceof

	Java objeto instanceof Clase
	PHP  $objeto instanceof Clase

	Ejemplos de polimorfismo:
		Sobreescritura de metodos
		Sobrecarga de metodos.
		Compatibilidad de clases.
		Java: Crear objetos de clases padres utilizando constructores de clases hijas, al final las instancias son del tipo de la clase hija.


Es posible inicializar los atributos internos de una clase haciendo uso de un constructor el cual tiene las siguientes caracteristicas:
	*Es un metodo
	*Tiene el mismo nombre de la clase
	*Puede recibir parametros
	*Obligatoriamente es public 
	*Es el primer metodo en ejecutarse al instanciar un objeto.
	*No tiene tipo de dato de retorno, inclusive void
	*Puede sobrecargarse.
	*Si no se define un constructor, Java crea un constructor vacio por defecto.


Sobrecarga de metodos: Definir metodos con el mismo nombre pero que se diferencian por la cantidad o tipos de parametros


//Retomar en herencia
Sobreescritura: Volver a escribir un metodo en la clase hija que estaba definido en una clase padre.


Opciones para gestionar varios elementos:
Arreglos convencionales:
	No son dinamicos.
Colecciones:
	ArrayList
	ObservableList -> JavaFX
	HashMap
	HashTable
	LinkedList
	Vector



Formas de capturar informacion:
*Scanner: Para capturar informacion desde la consola
*JOptionPane: Para capturar o mostrar informacion en cuadros de dialogo.
*Cuadros de dialogo en JavaFX:
	Mostrar informacion: Alert
	Capturar informacion: TextInputDialog
*Formularios: Para mostrar y capturar informacion mediante una interfaz grafica de usuario (GUI).


Tecnologias para desarrollo de GUI en Java:
AWT
Swing
JavaFX

Wrappers (Clases envolventes):
Boolean ->boolean
Integer -> int
Double -> double
Float -> float
Long -> long
Byte -> byte
Short -> short 



CSS:
Se puede definir de 3 formas:
*En linea: Es decir dentro de la misma etiqueta html a personalizar, se usa la propiedad style.
*En el encabezado de la pagina: Es decir en la etiqueta <head>, esto se hace mediante la etiqueta <style type="text/css"></style> y dentro de su cuerpo se definen selectores o reglas para aplicar los estilos.
*En un archivo externo: En este caso los estilos se definen en un archivo externo con la extension .css y se incluyen en el html utilizando la etiqueta link
	ejemplo:
		 <link href="css/bootstrap.min.css" rel="stylesheet">
